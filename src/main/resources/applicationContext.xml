<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
 
        <property name="driverClassName" value="${database.driver}" />
        <property name="url" value="${database.url}" />
        <property name="username" value="${database.user}" />
        <property name="password" value="${database.password}" />
    </bean>
    
    <!--Executar a migração deve ser feito antes de carregar os beans-->
    <bean id="flyway" class="com.googlecode.flyway.core.Flyway" init-method="migrate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--O carregamento dos beans deve ser feito após realizar a migração com o flyway-->
<!--Isso é necessário, pois podem existir classes que dependem de migrações ainda não realizadas-->
    <context:component-scan base-package="br.danielcastellani.bbb" />

    <bean class="org.springframework.web.context.support.ServletContextAttributeExporter">
        <property name="attributes">
            <map>
                <entry key="votacaoControler" value-ref="votacaoControler"/>
            </map>
        </property>
    </bean>
    
    <!--Quartz Job para salvar os votos-->

    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="votacaoService" />
        <property name="targetMethod" value="salvaVotacaoAtual" />
        <property name="concurrent" value="false" />
    </bean>

    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="jobDetail" />
        <!-- start after 1 second -->
        <property name="startDelay" value="1000" />
        <!-- repeat every 1 second -->
        <property name="repeatInterval" value="1000" />
    </bean>

    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger" />
            </list>
        </property>
    </bean>
 
</beans>